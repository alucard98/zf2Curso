Patrones usados en Zend Framework
---------------------------------

trabaja con 4 grandes grpos

-MVC
una vision distinta e inovadora con lo q respecta a lo tradicional 

-Service Locator
nos permite almacenar obejos dentro de un contenedor ligero. y se puede contar con ellos en cualquier momento. en tiempo real y disponibles en cualquier momento, en modulos o vistas, en capas, ah sido escrito desde 0 y se optimizaron muchos procesos para agilizar las cargas del http 

-Table Gateway
cada tabla de la base de datos, nos permite disparar o disipar o comunicarnos con funcionalidades CRUD, 

-Front Controller
lo que hace es permitir manejar todos los procesos asociados a las peticiones que vienen desde la url, lo filtra. limpia. valida para que lo que se recibe por la url no sea un exploid o esetipo de cosas , lo valida lo filtra y si esta asociado a lo que el framework requiere entonce brinda la respueusta en el codigo que se programo

Standad de codificacion de ZF2
------------------------------

- seguir el stadad de codificacion Zend y el uso de apertura de tags en las vistas PHTML, mas no en las clases. esto quiere decir que en las vistas solamente cerraremos los tags de php pero en las clases no

- Los atributos son siempre protegidos o privados y soolo se puede acceder a ellos mediante metodos getter/setter (principiio de ocultacion), esta es una caracteristica de zf2 , 

- Se debe usar CamelCase en la escritura de código. las clases siempre deben comenxar con mayuscula, mentras que los metodos y variiables deben nombrarse coon minuscula al inicio y luego CamelCase

- no se puede usar short tags (<?= ). porque produce muchos errores.. 

- Los nombres de archivo deben llamarse igual que la clase que contienen solo debe haber una clase por archivo, 

Trabajo en Capas de ZF2
------------------------

Capa Web.- entran los layouts, para el diseño personalizado para las aplicaciones y desarrollos, 

Capa de Negocio.- genera y trabaja todas las entidades y clases, tbm con el DAO  (objeto q se utiliza para acceder a datos) , herramienta service manager.

Capa de acceso de datos.- todo lo que tiene que ver con programacion php de object, trabajo del modulo zend db, tabl gateway, aplicacion del patron doctrine, leer siertos datos y almacenarlos en la base de datos


Modelo Vista Controlador
------------------------


  Modelo -> Controlador -> Vista
|---------- Proyecto ------------|


Componentes Zend\MVC
--------------------
entrando en el core, nucleo del zf, su componente por excelencia es zend\mvc, desde la version 1 modificaron la funcionalidad de mvc y lo dividieron por componentes, que se van dividiendo las tareas para tener mayor eficiencia y rendimiento para trabajar con la vista y el controlador.

- Zend\ServiceManager.- provee un conjunto de servicios listos para ser usados, estan dentro de un namespace ZENDMVCNAMESPACE, se encarga de crear las instancias mediante las factorias.

- Zend\EventManager.- lo que hace es manejar los listener, vigilantes que estan esperando las interacciones del usuario, para poder entregar un resultado.

- Zend\Http.- este componente maneja los request y response, que encapsulan todo lo relacionado a la peticion de los usuarios, parametros y respuestas retornadas. gestiona lo que hacia el modilo de las URL, el front controler.

- Zend\DispatchableInterface.- es un componente que hace quue todos los controladores trabajen como instancias despachables, que cada uno de ellos tenga la funcionalidad de que ese controlador pueda ser llamado desde otro controlador o vista, o  modelo..  


Sub-Componentes o servicios de ZEND\MVC
--------------------------------------
especificamente del ServiceManager, los mas importantes son  

- Zend\Mvc\Router .-  contiene las clases que se encargan de un rquest, valida que coincida con determinado controlador segun el mapeo y las configuraciones, valida que los parametros q vienen de la url correspodadn al llamado de un controlador, este controlador pertenesca a un modelo, y este modelo lleva un parametro sea correcto. gestiona las validaciones de la url y procesa toda la funcionalidad para q el framework pueda cargar correctamente.

- Zend\Http\PhpEnvironment .- proporciona un conjunto de decoradores, objetos con funcionalidad extra, para los objetos request y response, GET O POST , nos gaantiza que sea injectado  con los parametros y variables correctos. apoya a Router

- Zend\Mvc\Controller .-  contiene un conjunto de clases controler, abstractas e nterfaces con responsabilidades de como implementar el evento que permite laa injeccion de recursos a la aplicacion. apoya al php eviroment, 

- Zend\Mvc\Service .-  es un componente q contiene un grupo de clases de factorias de servicios q son iniciados por nuestra aplicacion en el arranque. asociado al bootsraap. (es una funcionalidad que esta asociada a generar un motor de aranque basado en un solo archivo el cual postula con un patron de ruteo)

- Zend\Mvc\View .- nos provee con un mecanismo por defecto para renderizar las vistas, la resolucion de las vistas, y el viwscript, nos permite tbm que las vistas puedan ir converando con los helpers (zend form que nos permite crear formularios,)

Estructura de la URL en ZF2
---------------------------

http://zf2curso.com/clase02/public/modulo/controlador/vista/parametro

module \ Application\config\module.config.php

Directorios : 
------------

init_autoloader.php : genera el autoload, permite q el bootstrap cargue a travez de un archivo especifico "index.php" q esta en el public.

config: Contiene toda la confoguracion utilizada por el componente ZenModuleManager para cargar las configuracioens de todos los modulos, q estan asociadas a un archivo Application.config
 
Vendor: contiene todos los propios componente y/o librerias de 3ros para trabajar, ejemplo el doctryne , o propios del nucleo de zf2.  bin -> asociado a mapeo de ruzas , ZF2-> en donde esta el core
repositorio de modulos desde la comunidad https://zfmodules.com/

data: almacena el cache y la data

public: almacena todo lo que tiene q ver con el Document Object Model, hojas de estilos, bostrap min, responsive, jquerys, html5, imagenes, el index.php que es donde se carga la funcionalidad de toda la aplicacion.

module: Aplication: contiene todo el core de nuestra aplicacion, module.php-> tiene el llamado a los componentes zendRouteListener y MVEvent

src: aplication: aqui se colocan los controladores , y los modelos
view: los archivos de error, los layouts y tbm dentro de aplication generamos la vista.
por cadaa vista deberiamos crear un directorio con el nombre del controlador




















































